#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webchat:server');
var http = require('http');
var dbHelper = require('../db/DbHelper');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io = require('socket.io').listen(server);

var users=[];
var online=[];
var sockets=[];
io.on('connection', function(socket) {
  var uid;
  socket.on('login', function(usrName) {
      uid=usrName;
      users[uid] = socket.id;
      sockets[socket.id] = {uid:uid,socket:socket};
      online.push(uid);
  });
  socket.on('private message', function(uid,fid,message){
    var status;

    if(online.indexOf(fid)!==-1){
      status = 1;
      sockets[users[fid]].socket.emit('newMsg',fid,message);
    } else{
      // 如果不在线的话，状态为0
      status = 0;
    }
    var data={
      userId: uid,
      from: uid,
      to: fid,
      status: status,
      content: message
    }
    //把消息存到数据库中去
    dbHelper.addMsg(data,function (success,doc) {
      console.log("right");
    });

  });
  socket.on('sendImg',function (uid,fid,img) {
    var status;

    if(online.indexOf(fid)!==-1){
      status = 1;
      sockets[users[fid]].socket.emit('newImg',fid,img);
    } else{
      // 如果不在线的话，状态为0
      status = 0;
    }
    var data={
      userId: uid,
      from: uid,
      to: fid,
      status: status,
      content: img
    }
    //把消息存到数据库中去
    dbHelper.addMsg(data,function (success,doc) {
      console.log("right");
    });

  });
  // socket.on('disconnect', function() {
  //   online.splice(online.indexOf(uid),1);
  // });
});
/**s
/**s
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;r
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
